// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save User entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("User", id.toString(), this);
    }
  }

  static load(id: string): User | null {
    return changetype<User | null>(store.get("User", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get stakingPools(): Array<string> | null {
    let value = this.get("stakingPools");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set stakingPools(value: Array<string> | null) {
    if (!value) {
      this.unset("stakingPools");
    } else {
      this.set("stakingPools", Value.fromStringArray(<Array<string>>value));
    }
  }

  get tokens(): Array<string> | null {
    let value = this.get("tokens");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set tokens(value: Array<string> | null) {
    if (!value) {
      this.unset("tokens");
    } else {
      this.set("tokens", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class StakingPool extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("sAmount", Value.fromBigInt(BigInt.zero()));
    this.set("amountStaked", Value.fromBigInt(BigInt.zero()));
    this.set("ratio", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("currentAmount", Value.fromBigInt(BigInt.zero()));
    this.set("totalDepositAmount", Value.fromBigInt(BigInt.zero()));
    this.set("totalRewards", Value.fromBigInt(BigInt.zero()));
    this.set("totalWithdrawAmount", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save StakingPool entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save StakingPool entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("StakingPool", id.toString(), this);
    }
  }

  static load(id: string): StakingPool | null {
    return changetype<StakingPool | null>(store.get("StakingPool", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get sAmount(): BigInt {
    let value = this.get("sAmount");
    return value!.toBigInt();
  }

  set sAmount(value: BigInt) {
    this.set("sAmount", Value.fromBigInt(value));
  }

  get amountStaked(): BigInt {
    let value = this.get("amountStaked");
    return value!.toBigInt();
  }

  set amountStaked(value: BigInt) {
    this.set("amountStaked", Value.fromBigInt(value));
  }

  get ratio(): BigDecimal {
    let value = this.get("ratio");
    return value!.toBigDecimal();
  }

  set ratio(value: BigDecimal) {
    this.set("ratio", Value.fromBigDecimal(value));
  }

  get currentAmount(): BigInt {
    let value = this.get("currentAmount");
    return value!.toBigInt();
  }

  set currentAmount(value: BigInt) {
    this.set("currentAmount", Value.fromBigInt(value));
  }

  get totalDepositAmount(): BigInt {
    let value = this.get("totalDepositAmount");
    return value!.toBigInt();
  }

  set totalDepositAmount(value: BigInt) {
    this.set("totalDepositAmount", Value.fromBigInt(value));
  }

  get totalRewards(): BigInt {
    let value = this.get("totalRewards");
    return value!.toBigInt();
  }

  set totalRewards(value: BigInt) {
    this.set("totalRewards", Value.fromBigInt(value));
  }

  get totalWithdrawAmount(): BigInt {
    let value = this.get("totalWithdrawAmount");
    return value!.toBigInt();
  }

  set totalWithdrawAmount(value: BigInt) {
    this.set("totalWithdrawAmount", Value.fromBigInt(value));
  }

  get poolUsers(): Array<string> | null {
    let value = this.get("poolUsers");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set poolUsers(value: Array<string> | null) {
    if (!value) {
      this.unset("poolUsers");
    } else {
      this.set("poolUsers", Value.fromStringArray(<Array<string>>value));
    }
  }

  get stats(): Array<string> | null {
    let value = this.get("stats");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set stats(value: Array<string> | null) {
    if (!value) {
      this.unset("stats");
    } else {
      this.set("stats", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class StakingPoolStats extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("date", Value.fromI32(0));
    this.set("sAmount", Value.fromBigInt(BigInt.zero()));
    this.set("amountStaked", Value.fromBigInt(BigInt.zero()));
    this.set("ratio", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("currentAmount", Value.fromBigInt(BigInt.zero()));
    this.set("totalDepositAmount", Value.fromBigInt(BigInt.zero()));
    this.set("totalRewards", Value.fromBigInt(BigInt.zero()));
    this.set("totalWithdrawAmount", Value.fromBigInt(BigInt.zero()));
    this.set("pool", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save StakingPoolStats entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save StakingPoolStats entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("StakingPoolStats", id.toString(), this);
    }
  }

  static load(id: string): StakingPoolStats | null {
    return changetype<StakingPoolStats | null>(
      store.get("StakingPoolStats", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get date(): i32 {
    let value = this.get("date");
    return value!.toI32();
  }

  set date(value: i32) {
    this.set("date", Value.fromI32(value));
  }

  get sAmount(): BigInt {
    let value = this.get("sAmount");
    return value!.toBigInt();
  }

  set sAmount(value: BigInt) {
    this.set("sAmount", Value.fromBigInt(value));
  }

  get amountStaked(): BigInt {
    let value = this.get("amountStaked");
    return value!.toBigInt();
  }

  set amountStaked(value: BigInt) {
    this.set("amountStaked", Value.fromBigInt(value));
  }

  get ratio(): BigDecimal {
    let value = this.get("ratio");
    return value!.toBigDecimal();
  }

  set ratio(value: BigDecimal) {
    this.set("ratio", Value.fromBigDecimal(value));
  }

  get currentAmount(): BigInt {
    let value = this.get("currentAmount");
    return value!.toBigInt();
  }

  set currentAmount(value: BigInt) {
    this.set("currentAmount", Value.fromBigInt(value));
  }

  get totalDepositAmount(): BigInt {
    let value = this.get("totalDepositAmount");
    return value!.toBigInt();
  }

  set totalDepositAmount(value: BigInt) {
    this.set("totalDepositAmount", Value.fromBigInt(value));
  }

  get totalRewards(): BigInt {
    let value = this.get("totalRewards");
    return value!.toBigInt();
  }

  set totalRewards(value: BigInt) {
    this.set("totalRewards", Value.fromBigInt(value));
  }

  get totalWithdrawAmount(): BigInt {
    let value = this.get("totalWithdrawAmount");
    return value!.toBigInt();
  }

  set totalWithdrawAmount(value: BigInt) {
    this.set("totalWithdrawAmount", Value.fromBigInt(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value!.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }
}

export class StakingPoolUser extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("sAmount", Value.fromBigInt(BigInt.zero()));
    this.set("lockedUntil", Value.fromBigInt(BigInt.zero()));
    this.set("pool", Value.fromString(""));
    this.set("user", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save StakingPoolUser entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save StakingPoolUser entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("StakingPoolUser", id.toString(), this);
    }
  }

  static load(id: string): StakingPoolUser | null {
    return changetype<StakingPoolUser | null>(store.get("StakingPoolUser", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get sAmount(): BigInt {
    let value = this.get("sAmount");
    return value!.toBigInt();
  }

  set sAmount(value: BigInt) {
    this.set("sAmount", Value.fromBigInt(value));
  }

  get lockedUntil(): BigInt {
    let value = this.get("lockedUntil");
    return value!.toBigInt();
  }

  set lockedUntil(value: BigInt) {
    this.set("lockedUntil", Value.fromBigInt(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value!.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value!.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }
}

export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("name", Value.fromString(""));
    this.set("symbol", Value.fromString(""));
    this.set("totalSupply", Value.fromBigInt(BigInt.zero()));
    this.set("totalTransfers", Value.fromBigInt(BigInt.zero()));
    this.set("totalHolders", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Token entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Token entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Token", id.toString(), this);
    }
  }

  static load(id: string): Token | null {
    return changetype<Token | null>(store.get("Token", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value!.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get totalSupply(): BigInt {
    let value = this.get("totalSupply");
    return value!.toBigInt();
  }

  set totalSupply(value: BigInt) {
    this.set("totalSupply", Value.fromBigInt(value));
  }

  get totalTransfers(): BigInt {
    let value = this.get("totalTransfers");
    return value!.toBigInt();
  }

  set totalTransfers(value: BigInt) {
    this.set("totalTransfers", Value.fromBigInt(value));
  }

  get totalHolders(): BigInt {
    let value = this.get("totalHolders");
    return value!.toBigInt();
  }

  set totalHolders(value: BigInt) {
    this.set("totalHolders", Value.fromBigInt(value));
  }

  get holders(): Array<string> | null {
    let value = this.get("holders");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set holders(value: Array<string> | null) {
    if (!value) {
      this.unset("holders");
    } else {
      this.set("holders", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class TokenHolder extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("amount", Value.fromBigInt(BigInt.zero()));
    this.set("token", Value.fromString(""));
    this.set("user", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TokenHolder entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save TokenHolder entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("TokenHolder", id.toString(), this);
    }
  }

  static load(id: string): TokenHolder | null {
    return changetype<TokenHolder | null>(store.get("TokenHolder", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get token(): string {
    let value = this.get("token");
    return value!.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value!.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }
}
